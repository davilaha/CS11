

=======================================
example1                              =
=======================================
#! /bin/bash                          =
#-------------------------------------=
# example1                            =
#-------------------------------------=
echo "Hello, World!"                  =
=======================================
Make example1 executable and run it by doing
% chmod 700 example1
% example1

=======================================
example2                              =
=======================================
#! /bin/bash                          =
#--------------------------------------
# example2                            =
#-------------------------------------=
NAME="your_name"                      =
echo -n "Hello $NAME. It is now"      =
date +"%l:%M %p %Z, %A %B %d, %Y."    =
=======================================
To define a variable we just do VAR=VALUE like in example2 NAME="your_name"
To access the value stored in a variable however, we must place a $ before its name. 

' echo -n "Hello $NAME. It is now '

=======================================
example3                              =
=======================================
#! /bin/bash                          =
#--------------------------------------
# example3                            =
#-------------------------------------=
ls -l                                 =
example1 > junk-out                   =
example2 >> junk-out                  =
javac example1 >& comp-errs           =
=======================================
The first line ls â€“l is the only line whose output goes to stdout.
Redirect operators: >, >> and >&

The line example1 > junk-out RUNS example1 and SENDS its output to a new file called junk-out.

The line example2 >> junk-out APPENDS the output of example2 to the same file. 

The next line RUNS the javac compiler on the file example1. 
Since example1 is not a Java source file, one expects to get only error.
messages from the compiler. errors you get from javac go to stderr.

The line javac example1 >& comp-errs places those errors in the file comp-errs.


